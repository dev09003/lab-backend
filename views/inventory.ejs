<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventory Page</title>
    <link rel="stylesheet" href="/styles.css">
    <link rel="icon" href="https://th.bing.com/th/id/OIP.U7wPiyKBPvHs0Zm0oADOYwHaE8?w=600&h=400&rs=1&pid=ImgDetMain">
    <style>
        :root {
            --font: sans-serif;
            --color: white;
            --cardcolor: #4a5568;
            --bgc: gray;
            --table-bg: #1a202c;
            --table-header-bg: #2d483a;
            --border-color: black;
            --delete-color: #e53e3e;
            --highlight-yellow: #ffeb3b;
            --highlight-red: #ff4c4c;
            --warning-color: #ff9800; /* Warning color for low stock */
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            background-color: var(--bgc);
            color: var(--color);
            font-family: var(--font);
            margin: 0;
            padding: 0;
        }

        h1 {
            text-align: center;
            margin-top: 20px;
            color: var(--color);
        }

        table {
            width: 90%;
            margin: 20px auto;
            border-collapse: collapse;
            background-color: var(--table-bg);
        }

        table,
        th,
        td {
            border: 1px solid var(--border-color);
        }

        th,
        td {
            padding: 12px;
            text-align: left;
            color: var(--color);
        }

        th {
            background-color: var(--table-header-bg);
        }

        tr:nth-child(even) {
            background-color: var(--cardcolor);
        } 

        .btn {
            padding: 10px 20px;
            background-color: var(--table-header-bg);
            color: var(--color);
            text-align: center;
            display: inline-block;
            border: none;
            cursor: pointer;
            margin-top: 20px;
            transition: background-color 0.3s ease;
        }

        .btn:hover {
            background-color: var(--cardcolor);
        }

        .container {
            text-align: center;
        }

        .delete-btn {
            background-color: var(--delete-color);
            color: white;
            padding: 5px 10px;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .delete-btn:hover {
            background-color: #c53030;
        }

        .highlight-yellow {
            background-color: var(--highlight-yellow) !important;
        }

        .highlight-red {
            background-color: var(--highlight-red) !important;
        }

        .low-stock-warning {
            background-color: var(--warning-color);
            color: black;
            text-align: center;
            padding: 10px;
            margin-top: 20px;
            display: none;
            width: 90%;
            margin: 20px auto;
            border: 1px solid var(--border-color);
        }

        
    </style>
</head>

<body>

    <h1>Inventory List</h1>


    

    <!-- Warning message -->
    <div id="low-stock-warning" class="low-stock-warning">
        Warning: Some items are running low on stock!
    </div>

    <table>
        <tr>
            <th>Item Name</th>
            <th>Description</th>
            <th>Quantity</th>
            <th>Price</th>
            <th>Expiry Date</th>
            <th>Shelf No.</th>
            <th>Actions</th>
        </tr>
        <!-- Rows will be added here by JavaScript -->
    </table>

    <div class="container">
        <button class="btn">Add New Item</button>
        <button class="btn" id="scanBtn">Scan QR Code</button>
    </div>
    
    
    
    <script>


    document.getElementById('scanBtn').addEventListener('click', function() {
        window.location.href = '/index';  // Redirects to the QR scanning page
    });





        document.addEventListener("DOMContentLoaded", function () {
    const addButton = document.querySelector('.btn');
    const table = document.querySelector('table');
    const lowStockWarning = document.getElementById('low-stock-warning');


    const scannedItem = localStorage.getItem('scannedItem');
if (scannedItem) {
    const item = JSON.parse(scannedItem);

    // Add the scanned item to the table
    addRowToTable(item);

    // Save the updated inventory
    const storedInventory = JSON.parse(localStorage.getItem('inventory')) || [];
    storedInventory.push(item);
    localStorage.setItem('inventory', JSON.stringify(storedInventory));

    // Remove scanned item from localStorage after adding it
    localStorage.removeItem('scannedItem');
}







    function loadInventory() {
        const storedInventory = localStorage.getItem('inventory');
        if (storedInventory) {
            const inventory = JSON.parse(storedInventory);
            inventory.forEach(item => addRowToTable(item));
        }
        checkLowStock(); // Check low stock items after loading
        highlightExpiringItems(); // Highlight items that are expiring
        checkExpiredItems(); // Check for expired items
        checkExpiringSoonItems(); // Check for expiring soon items
    }

    function saveInventory() {
        const rows = document.querySelectorAll('table tr');
        const inventory = Array.from(rows).slice(1).map(row => {
            const cells = row.cells;
            return {
                name: cells[0].innerHTML,
                description: cells[1].innerHTML,
                quantity: cells[2].innerHTML,
                price: cells[3].innerHTML,
                expiry: cells[4].innerHTML,
                shelf: cells[5].innerHTML,
            };
        });
        localStorage.setItem('inventory', JSON.stringify(inventory));
    }

    function addRowToTable(item) {
        const newRow = table.insertRow();
        const cells = ['name', 'description', 'quantity', 'price', 'expiry', 'shelf'];
        cells.forEach((cell, index) => newRow.insertCell(index).innerHTML = item[cell]);
        const actionsCell = newRow.insertCell(6);

        const deleteButton = document.createElement('button');
        deleteButton.innerHTML = 'Decrease Quantity';
        deleteButton.classList.add('delete-btn');
        actionsCell.appendChild(deleteButton);

        decreaseQuantity(deleteButton);
    }

    function decreaseQuantity(button) {
        button.addEventListener('click', function () {
            const row = button.closest('tr');
            const quantityCell = row.cells[2];
            let quantity = parseInt(quantityCell.innerHTML);

            if (quantity > 1) {
                quantity--;
                quantityCell.innerHTML = quantity;
            } else {
                row.remove(); // Remove the row when quantity reaches zero
            }

            saveInventory();
            checkLowStock(); // Update low stock items after decreasing quantity
            checkExpiredItems(); // Check for expired items after decreasing quantity
            checkExpiringSoonItems(); // Check for expiring soon items after decreasing quantity
        });
    }

    function checkLowStock() {
        const rows = document.querySelectorAll('table tr');
        let lowStockItems = [];
        let lowStock = false;

        rows.forEach(row => {
            const quantityCell = row.cells[2];
            if (quantityCell) {
                const quantity = parseInt(quantityCell.innerHTML);
                if (quantity < 6) {
                    lowStock = true;
                    lowStockItems.push(row.cells[0].innerHTML); // Store item name
                }
            }
        });

        lowStockWarning.style.display = lowStock ? 'block' : 'none';
        // Store low stock items in localStorage
        localStorage.setItem('lowStockItems', JSON.stringify(lowStockItems));
    }

    function highlightExpiringItems() {
        const rows = document.querySelectorAll('table tr');
        const currentDate = new Date();
        currentDate.setHours(0, 0, 0, 0);

        rows.forEach(row => {
            const expiryDateCell = row.cells[4];
            if (expiryDateCell && expiryDateCell.innerHTML !== 'N/A') {
                const expiryDate = new Date(expiryDateCell.innerHTML);
                expiryDate.setHours(0, 0, 0, 0);
                const dayDifference = Math.ceil((expiryDate - currentDate) / (1000 * 60 * 60 * 24));

                row.classList.remove('highlight-yellow', 'highlight-red');
                if (dayDifference < 0) {
                    row.classList.add('highlight-red');
                } else if (dayDifference <= 6) {
                    row.classList.add('highlight-yellow');
                }
            }
        });
    }

    function checkExpiredItems() {
        const rows = document.querySelectorAll('table tr');
        const expiredItems = [];

        rows.forEach(row => {
            const expiryDateCell = row.cells[4];
            if (expiryDateCell && expiryDateCell.innerHTML !== 'N/A') {
                const expiryDate = new Date(expiryDateCell.innerHTML);
                const currentDate = new Date();
                currentDate.setHours(0, 0, 0, 0);

                if (expiryDate < currentDate) {
                    expiredItems.push(row.cells[0].innerHTML); // Store item name
                }
            }
        });

        localStorage.setItem('expiredItems', JSON.stringify(expiredItems)); // Save expired items
    }

    function checkExpiringSoonItems() {
        const rows = document.querySelectorAll('table tr');
        const expiringSoonItems = [];

        const currentDate = new Date();
        currentDate.setHours(0, 0, 0, 0);

        rows.forEach(row => {
            const expiryDateCell = row.cells[4];
            if (expiryDateCell && expiryDateCell.innerHTML !== 'N/A') {
                const expiryDate = new Date(expiryDateCell.innerHTML);
                expiryDate.setHours(0, 0, 0, 0);
                const dayDifference = Math.ceil((expiryDate - currentDate) / (1000 * 60 * 60 * 24));

                if (dayDifference <= 6 && dayDifference >= 0) {
                    expiringSoonItems.push({
                        name: row.cells[0].innerHTML,
                        expiry: expiryDateCell.innerHTML
                    });
                }
            }
        });

        localStorage.setItem('expiringSoon', JSON.stringify(expiringSoonItems)); // Save expiring items
    }

    addButton.addEventListener('click', function () {
        const newItemName = prompt("Enter item name:");
        const newItemDesc = prompt("Enter item description:");
        const newItemQty = prompt("Enter item quantity:");
        const newItemPrice = prompt("Enter item price (without ₹):");
        const newItemExpiry = prompt("Enter expiry date (YYYY-MM-DD) or N/A:");
        const newItemShelfNo = prompt("Enter shelf number:");

        if (newItemName && newItemDesc && newItemQty && newItemPrice && newItemShelfNo) {
            const quantity = parseInt(newItemQty);
            const price = parseFloat(newItemPrice);

            if (isNaN(quantity) || quantity <= 0) {
                alert("Quantity must be a positive number.");
                return;
            }

            if (isNaN(price) || price <= 0) {
                alert("Price must be a positive number.");
                return;
            }

            const newItem = {
                name: newItemName,
                description: newItemDesc,
                quantity: quantity,
                price: price.toFixed(2), // Format to 2 decimal places
                expiry: newItemExpiry,
                shelf: newItemShelfNo
            };

            addRowToTable(newItem);
            saveInventory();
            checkLowStock(); // Check for low stock after adding new item
            highlightExpiringItems(); // Highlight items that are expiring
            checkExpiredItems(); // Check for expired items after adding new item
            checkExpiringSoonItems(); // Check for expiring soon items
        }

        const scannedItem = localStorage.getItem('scannedItem');
        if (scannedItem) {
            const item = JSON.parse(scannedItem);

            // Add the scanned item to the table
            addRowToTable(item);

            // Save the updated inventory
            const storedInventory = JSON.parse(localStorage.getItem('inventory')) || [];
            storedInventory.push(item);
            saveInventory(storedInventory);

            // Remove scanned item from localStorage after adding it
            localStorage.removeItem('scannedItem');
        }
    });

    loadInventory();
});


    </script>
</body>

</html>
