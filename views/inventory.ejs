<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventory Page</title>
    <link rel="stylesheet" href="/styles.css">
    <link rel="icon" href="https://th.bing.com/th/id/OIP.U7wPiyKBPvHs0Zm0oADOYwHaE8?w=600&h=400&rs=1&pid=ImgDetMain">
    <style>
        :root {
            --font: sans-serif;
            --color: white;
            --cardcolor: #4a5568;
            --bgc: gray;
            --table-bg: #1a202c;
            --table-header-bg: #2d483a;
            --border-color: black;
            --delete-color: #e53e3e;
            --highlight-yellow: #eab308; /* Expiring soon */
            --highlight-red: #Ef4444; /* Expired */
            --highlight-orange: #f97316; /* Low stock */
            --highlight-violet: #9c27b0; /* Expiring soon + Low stock */
            --highlight-green: #4caf50; /* Normal item */
            --warning-color: #ff9800;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            background-color: var(--bgc);
            color: var(--color);
            font-family: var(--font);
            margin: 0;
            padding: 0;
        }

        h1 {
            text-align: center;
            margin-top: 20px;
            color: var(--color);
        }

        table {
            width: 90%;
            margin: 20px auto;
            border-collapse: collapse;
            background-color: var(--table-bg);
        }

        table,
        th,
        td {
            border: 1px solid var(--border-color);
        }

        th,
        td {
            padding: 12px;
            text-align: left;
            color: var(--color);
        }

        th {
            background-color: var(--table-header-bg);
        }

        tr:nth-child(even) {
            background-color: var(--cardcolor);
        } 

        .btn {
            padding: 10px 20px;
            background-color: var(--table-header-bg);
            color: var(--color);
            text-align: center;
            display: inline-block;
            border: none;
            cursor: pointer;
            margin-top: 20px;
            transition: background-color 0.3s ease;
        }

        .btn:hover {
            background-color: var(--cardcolor);
        }

        .container {
            text-align: center;
        }

        .delete-btn {
            background-color: var(--delete-color);
            color: white;
            padding: 5px 10px;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .delete-btn:hover {
            background-color: #c53030;
        }

        .highlight-yellow {
            background-color: var(--highlight-yellow) !important;
            color: black !important;
        }

        .highlight-red {
            background-color: var(--highlight-red) !important;
            color: white !important;
        }

        .highlight-orange {
            background-color: var(--highlight-orange) !important;
            color: black !important;
        }

        .highlight-violet {
            background-color: var(--highlight-violet) !important;
            color: white !important;
        }

        .highlight-green {
            background-color: var(--highlight-green) !important;
            color: black !important;
        }

        .low-stock-warning {
            background-color: var(--warning-color);
            color: black;
            text-align: center;
            padding: 10px;
            margin-top: 20px;
            display: none;
            width: 90%;
            margin: 20px auto;
            border: 1px solid var(--border-color);
        }

        /* Search bar styles */
        .search-container {
            width: 90%;
            margin: 20px auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-radius: 20px;
        }

        .search-input {
            padding: 10px;
            width: 70%;
            border-radius: 30px;
            background-color: var(#fff);
            color: var(--color);
            border: 1px solid var(--border-color);
        }

        .search-btn {
            padding: 10px 20px;
            background-color: var(--table-header-bg);
            color: var(--color);
            border: none;
            cursor: pointer;
            transition: background-color 0.3s;
            border-radius: 18px;
            position: relative;
            left: -190px;
        }

        .search-btn:hover {
            background-color: var(--cardcolor);
        }

        .reset-btn {
            padding: 10px 20px;
            background-color: var(--delete-color);
            color: var(--color);
            border: none;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .reset-btn:hover {
            background-color: #c53030;
        }
        
    </style>
</head>

<body>

    <h1>Inventory List</h1>

    <!-- Search bar -->
    <div class="search-container">
        <input type="text" id="searchInput" class="search-input" placeholder="Search for items...">
        <button id="searchBtn" class="search-btn">Search</button>
        <button id="resetBtn" class="reset-btn">Reset</button>
    </div>

    <!-- Warning message -->
    <div id="low-stock-warning" class="low-stock-warning">
        Warning: Some items are running low on stock!
    </div>

    <table id="inventoryTable">
        <tr>
            <th>Item Name</th>
            <th>Description</th>
            <th>Quantity</th>
            <th>Price</th>
            <th>Expiry Date</th>
            <th>Shelf No.</th>
            <th>Actions</th>
        </tr>
        <!-- Rows will be added here by JavaScript -->
    </table>

    <div class="container">
        <button class="btn">Add New Item</button>
        <button class="btn" id="scanBtn">Scan QR Code</button>
    </div>
    
    
    
    <script>
    document.getElementById('scanBtn').addEventListener('click', function() {
        window.location.href = '/index';  // Redirects to the QR scanning page
    });

    document.addEventListener("DOMContentLoaded", function () {
        const addButton = document.querySelector('.btn');
        const table = document.querySelector('table');
        const lowStockWarning = document.getElementById('low-stock-warning');
        const searchInput = document.getElementById('searchInput');
        const searchBtn = document.getElementById('searchBtn');
        const resetBtn = document.getElementById('resetBtn');

        const scannedItem = localStorage.getItem('scannedItem');
        if (scannedItem) {
            const item = JSON.parse(scannedItem);

            // Add the scanned item to the table
            addRowToTable(item);

            // Save the updated inventory
            const storedInventory = JSON.parse(localStorage.getItem('inventory')) || [];
            storedInventory.push(item);
            localStorage.setItem('inventory', JSON.stringify(storedInventory));

            // Remove scanned item from localStorage after adding it
            localStorage.removeItem('scannedItem');
        }

        function loadInventory() {
            const storedInventory = localStorage.getItem('inventory');
            if (storedInventory) {
                const inventory = JSON.parse(storedInventory);
                inventory.forEach(item => addRowToTable(item));
            }
            updateItemHighlights(); // Check and update all item highlights
        }

        function saveInventory() {
            const rows = document.querySelectorAll('table tr');
            const inventory = Array.from(rows).slice(1).map(row => {
                const cells = row.cells;
                return {
                    name: cells[0].innerHTML,
                    description: cells[1].innerHTML,
                    quantity: cells[2].innerHTML,
                    price: cells[3].innerHTML,
                    expiry: cells[4].innerHTML,
                    shelf: cells[5].innerHTML,
                };
            });
            localStorage.setItem('inventory', JSON.stringify(inventory));
        }

        function addRowToTable(item) {
            const newRow = table.insertRow();
            const cells = ['name', 'description', 'quantity', 'price', 'expiry', 'shelf'];
            cells.forEach((cell, index) => newRow.insertCell(index).innerHTML = item[cell]);
            const actionsCell = newRow.insertCell(6);

            const deleteButton = document.createElement('button');
            deleteButton.innerHTML = 'Decrease Quantity';
            deleteButton.classList.add('delete-btn');
            actionsCell.appendChild(deleteButton);

            decreaseQuantity(deleteButton);
        }

        function decreaseQuantity(button) {
            button.addEventListener('click', function () {
                const row = button.closest('tr');
                const quantityCell = row.cells[2];
                let quantity = parseInt(quantityCell.innerHTML);

                if (quantity > 1) {
                    quantity--;
                    quantityCell.innerHTML = quantity;
                } else {
                    row.remove(); // Remove the row when quantity reaches zero
                }

                saveInventory();
                updateItemHighlights(); // Update highlights after quantity change
            });
        }

        function updateItemHighlights() {
            checkLowStock(); // Check low stock items
            checkExpiredItems(); // Check expired items
            checkExpiringSoonItems(); // Check expiring soon items
            
            // Apply the new color coding scheme
            applyColorCoding();
        }

        function applyColorCoding() {
            const rows = document.querySelectorAll('table tr');
            const currentDate = new Date();
            currentDate.setHours(0, 0, 0, 0);
            
            // Skip the header row
            for (let i = 1; i < rows.length; i++) {
                const row = rows[i];
                
                // Remove all highlight classes first
                row.classList.remove('highlight-yellow', 'highlight-red', 'highlight-orange', 'highlight-violet', 'highlight-green');
                
                const quantityCell = row.cells[2];
                const expiryDateCell = row.cells[4];
                
                // Check conditions
                let isLowStock = false;
                let isExpiringSoon = false;
                let isExpired = false;
                
                // Check quantity
                if (quantityCell && parseInt(quantityCell.innerHTML) < 6) {
                    isLowStock = true;
                }
                
                // Check expiry
                if (expiryDateCell && expiryDateCell.innerHTML !== 'N/A') {
                    const expiryDate = new Date(expiryDateCell.innerHTML);
                    expiryDate.setHours(0, 0, 0, 0);
                    const dayDifference = Math.ceil((expiryDate - currentDate) / (1000 * 60 * 60 * 24));
                    
                    if (dayDifference < 0) {
                        isExpired = true;
                    } else if (dayDifference <= 6) {
                        isExpiringSoon = true;
                    }
                }
                
                // Apply appropriate highlight class based on conditions
                if (isExpired) {
                    row.classList.add('highlight-red'); // Red for expired
                } else if (isLowStock && isExpiringSoon) {
                    row.classList.add('highlight-violet'); // Violet for both expiring soon and low stock
                } else if (isLowStock) {
                    row.classList.add('highlight-orange'); // Orange for low stock
                } else if (isExpiringSoon) {
                    row.classList.add('highlight-yellow'); // Yellow for expiring soon
                } else {
                    row.classList.add('highlight-green'); // Green for normal items
                }
            }
            
            // Sort the table rows according to priority
            sortTableByPriority();
            
            // Show warning if there are any low stock items
            const lowStockItems = Array.from(rows).slice(1).filter(row => 
                row.classList.contains('highlight-orange') || row.classList.contains('highlight-violet')
            );
            
            lowStockWarning.style.display = lowStockItems.length > 0 ? 'block' : 'none';
        }

        // New function to sort the table according to specified priority
        function sortTableByPriority() {
            const table = document.getElementById('inventoryTable');
            const tbody = table.tBodies[0] || table;
            const rows = Array.from(tbody.querySelectorAll('tr')).slice(1); // Skip header row
            const header = tbody.rows[0];
            
            // Define the priority order (higher priority items appear first)
            const priorityOrder = {
                'highlight-red': 1,      // Expired items (highest priority)
                'highlight-orange': 2,   // Low stock items
                'highlight-yellow': 3,   // Expiring soon items
                'highlight-violet': 4,   // Expiring soon + Low stock items
                'highlight-green': 5     // Normal items (lowest priority)
            };
            
            // Sort rows based on their highlight class priority
            rows.sort((rowA, rowB) => {
                let priorityA = 999; // Default high number for no class
                let priorityB = 999;
                
                // Determine priority of row A
                Object.keys(priorityOrder).forEach(className => {
                    if (rowA.classList.contains(className)) {
                        priorityA = priorityOrder[className];
                    }
                });
                
                // Determine priority of row B
                Object.keys(priorityOrder).forEach(className => {
                    if (rowB.classList.contains(className)) {
                        priorityB = priorityOrder[className];
                    }
                });
                
                return priorityA - priorityB;
            });
            
            // Remove all rows (except header) and re-append in the new order
            while (tbody.rows.length > 1) {
                tbody.deleteRow(1);
            }
            
            // Add sorted rows back to the table
            rows.forEach(row => {
                tbody.appendChild(row);
            });
        }

        function checkLowStock() {
            const rows = document.querySelectorAll('table tr');
            let lowStockItems = [];

            rows.forEach(row => {
                const quantityCell = row.cells[2];
                if (quantityCell) {
                    const quantity = parseInt(quantityCell.innerHTML);
                    if (quantity < 6) {
                        lowStockItems.push(row.cells[0].innerHTML); // Store item name
                    }
                }
            });

            // Store low stock items in localStorage
            localStorage.setItem('lowStockItems', JSON.stringify(lowStockItems));
        }

        function checkExpiredItems() {
            const rows = document.querySelectorAll('table tr');
            const expiredItems = [];
            const currentDate = new Date();
            currentDate.setHours(0, 0, 0, 0);

            rows.forEach(row => {
                const expiryDateCell = row.cells[4];
                if (expiryDateCell && expiryDateCell.innerHTML !== 'N/A') {
                    const expiryDate = new Date(expiryDateCell.innerHTML);
                    expiryDate.setHours(0, 0, 0, 0);

                    if (expiryDate < currentDate) {
                        expiredItems.push(row.cells[0].innerHTML); // Store item name
                    }
                }
            });

            localStorage.setItem('expiredItems', JSON.stringify(expiredItems)); // Save expired items
        }

        function checkExpiringSoonItems() {
            const rows = document.querySelectorAll('table tr');
            const expiringSoonItems = [];

            const currentDate = new Date();
            currentDate.setHours(0, 0, 0, 0);

            rows.forEach(row => {
                const expiryDateCell = row.cells[4];
                if (expiryDateCell && expiryDateCell.innerHTML !== 'N/A') {
                    const expiryDate = new Date(expiryDateCell.innerHTML);
                    expiryDate.setHours(0, 0, 0, 0);
                    const dayDifference = Math.ceil((expiryDate - currentDate) / (1000 * 60 * 60 * 24));

                    if (dayDifference <= 6 && dayDifference >= 0) {
                        expiringSoonItems.push({
                            name: row.cells[0].innerHTML,
                            expiry: expiryDateCell.innerHTML
                        });
                    }
                }
            });

            localStorage.setItem('expiringSoon', JSON.stringify(expiringSoonItems)); // Save expiring items
        }

        // Search function
        function searchInventory() {
            const searchTerm = searchInput.value.toLowerCase();
            const rows = table.getElementsByTagName('tr');
            
            // Skip the header row (index 0)
            for (let i = 1; i < rows.length; i++) {
                const row = rows[i];
                let found = false;
                
                // Check each cell in the row except the Actions column
                for (let j = 0; j < row.cells.length - 1; j++) {
                    const cellText = row.cells[j].textContent.toLowerCase();
                    if (cellText.includes(searchTerm)) {
                        found = true;
                        break;
                    }
                }
                
                // Show or hide the row based on search result
                row.style.display = found ? '' : 'none';
            }
        }

        // Reset search function
        function resetSearch() {
            searchInput.value = '';
            const rows = table.getElementsByTagName('tr');
            
            // Skip the header row (index 0)
            for (let i = 1; i < rows.length; i++) {
                rows[i].style.display = '';
            }
        }

        addButton.addEventListener('click', function () {
            const newItemName = prompt("Enter item name:");
            const newItemDesc = prompt("Enter item description:");
            const newItemQty = prompt("Enter item quantity:");
            const newItemPrice = prompt("Enter item price (without ₹):");
            const newItemExpiry = prompt("Enter expiry date (YYYY-MM-DD) or N/A:");
            const newItemShelfNo = prompt("Enter shelf number:");

            if (newItemName && newItemDesc && newItemQty && newItemPrice && newItemShelfNo) {
                const quantity = parseInt(newItemQty);
                const price = parseFloat(newItemPrice);

                if (isNaN(quantity) || quantity <= 0) {
                    alert("Quantity must be a positive number.");
                    return;
                }

                if (isNaN(price) || price <= 0) {
                    alert("Price must be a positive number.");
                    return;
                }

                const newItem = {
                    name: newItemName,
                    description: newItemDesc,
                    quantity: quantity,
                    price: price.toFixed(2), // Format to 2 decimal places
                    expiry: newItemExpiry,
                    shelf: newItemShelfNo
                };

                addRowToTable(newItem);
                saveInventory();
                updateItemHighlights(); // Update highlights after adding new item
            }

            const scannedItem = localStorage.getItem('scannedItem');
            if (scannedItem) {
                const item = JSON.parse(scannedItem);

                // Add the scanned item to the table
                addRowToTable(item);

                // Save the updated inventory
                const storedInventory = JSON.parse(localStorage.getItem('inventory')) || [];
                storedInventory.push(item);
                saveInventory(storedInventory);

                // Remove scanned item from localStorage after adding it
                localStorage.removeItem('scannedItem');
            }
        });

        // Add event listeners for search functionality
        searchBtn.addEventListener('click', searchInventory);
        resetBtn.addEventListener('click', resetSearch);
        
        // Add event listener for pressing Enter key in search input
        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchInventory();
            }
        });

        loadInventory();
    });
    </script>
</body>

</html>